#include <iostream>
#include "strutils.h"

bool isValidInput(string str) {
	for (int i = 0; i < str.length(); i++)
	{
		if (str[i] != 32) {
			if (!((int)UpperString(str)[i] >= 65 && (int)UpperString(str)[i] <= 90) && !((int)UpperString(str)[i] >= 48 && (int)UpperString(str)[i] <= 57))
			{
				return false;
			}
		}
	}
	return true;
}
bool isDone(string str) {
	int len = str.length();
	if (UpperString(str)[len-1]=='D'&& UpperString(str)[len-2]=='N'&&UpperString(str)[len-3]=='E')
	{
		return true;
	}
	return false;
}
void searchWord(string source, string search) {
	if (search.length() > 1)
	{

		char searchEnd = search[search.length() - 1];
		char searchEnd2 = search[search.length() - 2];
		int pos = -1;
		if (searchEnd == '+')
		{
			string newSearch = search.substr(0, search.length() - 1);
			do
			{
				if (pos == -1)
				{
					pos = source.find(newSearch);
				}
				else pos = source.find(newSearch, pos + 1);
				if (pos >= 0)
				{
					int temppos = pos;
					if (pos==0)
					{
						string tempstr = "";
						cout << "index: " << temppos << " word: ";
						while (source[temppos] != ' ')
						{
							tempstr+=source[temppos];
							temppos++;
						}
						cout <<tempstr<<endl;
					}
					else {
						if (source[temppos - 1] == ' ')
						{
							cout << "index: " << temppos << " word: ";
							while (source[temppos] != ' ')
							{
								cout << source[temppos];
								temppos++;
							}
							cout << endl;
						}
					}
				}
			} while (pos != string::npos);
		}
		else if (searchEnd == '.')
		{
			string newSearch = search.substr(0, search.length() - 1);
			do
			{
				if (pos == -1)
				{
					pos = source.find(newSearch);
				}
				else pos = source.find(newSearch, pos + 1);
				if (pos > 0&&source[pos + newSearch.length() ]==' ')
				{
				int temppos = pos;
				cout << "index: " << temppos << " word: ";
					while (temppos-1>=0)
					{
						if (source[temppos - 1] == ' ')
						{
							break;
						}
						temppos--;
					}
					string tempstr = "";
					while (source[temppos]!=' ')
					{
						tempstr+= source[temppos];
						temppos++;
					}
					cout<<tempstr<<endl;
				}
			} while (pos != string::npos);
		}
		else if (searchEnd == '*') {
			if (searchEnd2 == '*') {
				string newSearch = search.substr(0, search.length() - 2);
				do
				{
					if (pos == -1)
					{
						pos = source.find(newSearch);
					}
					else pos = source.find(newSearch, pos + 1); 
					if (pos > 0)
					{
						int temppos = pos;
						cout << "index: " << temppos << " word: ";
						while (temppos - 1 >= 0)
						{
							if (source[temppos - 1] == ' ')
							{
								break;
							}
							temppos--;
						}
						while (source[temppos] != ' ')
						{
							cout << source[temppos];
							temppos++;
						}
						cout << endl;
					}
				} while (pos != string::npos);
			}
			else {
				string newSearch = search.substr(0, search.length() - 1);
				do
				{
					if (pos == -1)
					{
						pos = source.find(newSearch);
					}
					else pos = source.find(newSearch, pos + 1);
					if (pos > 0 && source[pos - 1] != ' ' && source[pos + newSearch.length()] != ' ' && source[pos + 1] != ' ')
					{

						int temppos = pos;
						while (temppos - 1 >= 0)
						{
							if (source[temppos - 1] == ' ')
							{
								break;
							}
							temppos--;
						}
						string tempstr = "";
						while (source[temppos] != ' ')
						{
							tempstr += source[temppos];
							temppos++;
						}
						int checkPos = tempstr.find(newSearch);
						bool write = true;
						while (checkPos!=string::npos)
						{
							if (tempstr[checkPos+1]==tempstr[tempstr.length()]) 
							{
								write = false;
							}
							checkPos = tempstr.find(newSearch, checkPos+1);
						}
						if(write)cout << "index: " << pos << " word: " << tempstr << endl;
					}
				} while (pos != string::npos);
			}
		}
	}
}
int main()
{
	string sourceString="";
	string tempString;
	string searchString;
	cout << "Enter source string: ";
	do {
		getline(cin, tempString);
		if (isValidInput(tempString))
		{
			sourceString+=tempString;
			if (isDone(sourceString))
			{
				break;
			}
			else sourceString += " ";
		}
		else
			cout << "Enter source string: ";
	} while (true);
	while (true)
	{
		cout << "Enter search string: ";
		getline(cin, searchString);
		if (searchString != "quit" && searchString != "QUIT")
		{
			searchWord(sourceString, searchString);
		}
		else break;
	}
}
