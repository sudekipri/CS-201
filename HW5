// Sude Buket Kipri

#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include "strutils.h"
using namespace::std;
struct TVSeries {
	string seriesName;
	string actorName;
	double rating=0;
	int ratingCount=0;
};
int seriesExists(vector<struct TVSeries>& vec, string seriesName) {
	for (int i = 0; i < (int)vec.size(); i++) {
		struct TVSeries temp = vec.at(i);
		if (LowerString(temp.seriesName) == LowerString(seriesName))return i;
	}
	return -1;
}
void insertSeries(vector<struct TVSeries> &vec, struct TVSeries newSeries) {
	int index = seriesExists(vec, newSeries.seriesName);
	if (index == -1) {
		newSeries.ratingCount = 1;
		vec.push_back(newSeries);
	}
	else {
		vec.at(index).rating += newSeries.rating;
		vec.at(index).ratingCount++;
	}
}
void printSeries(vector<struct TVSeries> &vec, double ratingFilter) {
	cout << "RANK,NAME,ACTOR,POINTS" << endl;
	for (int i = 0; i < (int)vec.size(); i++) {
		struct TVSeries temp = vec.at(i);
		if (ratingFilter==-1||temp.rating >= ratingFilter) {
			cout << i + 1 << "," << UpperString(temp.seriesName) << "," << UpperString(temp.actorName) << "," << temp.rating << endl;
		}
	}
}
void searchByRating(vector<struct TVSeries>& vec) {
	cout << "Please enter the minimum rating: ";
	double minRating;
	cin >> minRating;
	if (minRating >= 0 && minRating <= 10) {
		printSeries(vec, minRating);
	}
	else cout << "This is not a valid rating!" << endl;
}
void printFavorites(vector<struct TVSeries>& vec) {
	if (vec.size() == 0) {
		cout << "Your favorite list is currently empty!" << endl;
	}
	else {
		cout << "RANK,NAME,ACTOR,POINTS" << endl;
		for (size_t i = 0; i < vec.size(); i++) {
			struct TVSeries temp = vec.at(i);
			cout << i + 1 << "," << UpperString(temp.seriesName) << "," << UpperString(temp.actorName) << "," << temp.rating << endl;
		}
	}
}
void addToFavorites(vector<struct TVSeries>& vec, struct TVSeries& series) {
	if (seriesExists(vec, series.seriesName) != -1) {
		cout << "Your favorite list already have " << UpperString(series.seriesName) << endl;
		return;
	}
	else {
		vec.push_back(series);
	}
}
void calculateRatings(vector<struct TVSeries>& vec) {
	for (int i = 0; i < (int)vec.size(); i++) {
		vec.at(i).rating = vec.at(i).rating/vec.at(i).ratingCount;
	}
}
bool compareRatings(struct TVSeries &s1, struct TVSeries &s2)
{
	if (s1.rating == s2.rating) {
		return s1.seriesName > s2.seriesName;
	}
	else {
		return s1.rating < s2.rating;
	}
}
void sortVector(vector<struct TVSeries> &vec) {
	for (size_t i = 0; i < vec.size(); i++)
	{
		for (size_t j = i + 1; j < vec.size(); j++)
		{
			if (compareRatings(vec.at(i), vec.at(j))) {
				swap(vec.at(i), vec.at(j));
			}
		}
	}
}
int main(int argc, char** argv) {
	string ratingFilename, actorTvFilename;
	ifstream ratingFile, actorFile;
	vector<struct TVSeries> tvSeries;
	vector<struct TVSeries> favorites;
	int choice;
	cout << "Welcome to Netflix TV Series Ratings Calculator!" << endl;
	while (true) {
		cout << "Please enter a filename for Series-Actor file: ";
		cin >> actorTvFilename;
		actorFile.open(actorTvFilename);
		if (actorFile.is_open()) {
			break;
		}
		else {
			cout << "Can not find the specified file." << endl;
		}
	}
	while (true) {
		cout << "Please enter a filename for Rating file: ";
		cin >> ratingFilename;
		ratingFile.open(ratingFilename);
		if (ratingFile.is_open()) {
			break;
		}
		else {
			cout << "Can not find the specified file." << endl;
		}
	}
	string line;
	while (getline(ratingFile, line))
	{
		struct TVSeries newSeries;
		stringstream ss(line);
		getline(ss, line, '\t');
		StripWhite(line);
		newSeries.rating=atof(line);
		getline(ss, line, '\t');
		StripWhite(line);
		newSeries.seriesName = line;
		insertSeries(tvSeries, newSeries);
	}
	string sname, aname; int index;
	while (getline(actorFile, line))
	{
		stringstream ss(line);
		getline(ss, line, ';');
		aname = line;
		getline(ss, line, ';');
		sname = line;
		StripWhite(aname);
		StripWhite(sname);
		index = seriesExists(tvSeries, sname);
		if(index!=-1)tvSeries.at(index).actorName = aname;
	}
	calculateRatings(tvSeries);
	sortVector(tvSeries);
	ratingFile.close();
	actorFile.close();
	string strparameter;
	while (true) {
		cout << "---\nMENU\n1. Print the series\n2. Search the series according to the rating" << endl;
		cout << "3. Add the series to the favorite list\n4. Print the favorite list\n5. Exit\n---" << endl;
		cout << "Enter your choice: ";
		cin >> choice;
		cout << "---" << endl;
		if (choice == 1) {
			printSeries(tvSeries, -1);
		}
		else if (choice == 2) {
			searchByRating(tvSeries);
		}
		else if (choice == 3) {
			cout << "Please enter the name of series: ";
			cin.ignore();
			getline(cin, strparameter);
			if (seriesExists(tvSeries, strparameter) == -1) {
				cout << "There is no such TV series!" << endl;
			}
			else {
				addToFavorites(favorites, tvSeries.at(seriesExists(tvSeries, strparameter)));
			}
		}
		else if (choice == 4) {
			sortVector(favorites);
			printFavorites(favorites);
		}
		else if (choice == 5) {
			break;
		}
		else {
			cout << "This is not a valid option!" << endl;
		}
	}
	return 0;
}
